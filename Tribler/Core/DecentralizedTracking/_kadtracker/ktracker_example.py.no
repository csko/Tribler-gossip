'''
This example shows how ktracker can be used as a library
'''

import time

import ktracker_query
import ktracker


my_dht_port = 1111

bootstrap_node_addr = ('127.0.0.1', 2222)
bootstrap_node_id = '0' * 20

info_hash = 'z' * 20
my_bt_addr = ('127.0.0.1', my_dht_port)


def on_query_event(query):
    print '-' * 40
    print 'Query status:', query.status
    print query.peers
    print '-' * 40




ktracker = ktracker.KTracker(my_dht_port)
ktracker.start()

# join an existing DHT via bootstraping node (node_id is optional)
ktracker.add_bootstrap_node(bootstrap_node_addr)

# create an announce_and_get_peers query
query = ktracker_query.AnnounceAndGetPeersQuery(info_hash, my_bt_addr)
ktracker.do_query(query, on_query_event)

# let's give some time for the first query to finish
time.sleep(60)

# create a get_peers query
query = ktracker_query.GetPeersQuery(info_hash)
ktracker.do_query(query, on_query_event)

# we are done
ktracker.stop()
