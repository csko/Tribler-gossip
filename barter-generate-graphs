#!/usr/bin/env python

"""
# setup once
./barter-ec-generator.py 10
./barter-setup-environment.sh 10

# obtain stats to plot
./barter-cluster-run

# parse logs and plot
./barter-generate-graphs peers_directory | gnuplot

# loot at graphs
display peers/records.png
"""

from time import mktime
import re
from os import listdir
from ldecoder import parse
from sys import argv

#def get_nodes():
#    for node in glob("peers/*"):
#        if node.startswith("peers/peer-"):
#            yield node

#def get_title(node):
#    if node.startswith("peers/peer-"):
#        return node[11:]
#    elif node == "peers/tracker":
#        return "tracker"
#    return "???"

def get_nodes(peer_dir):
    pattern = re.compile('[0-9]{5}')
    for d in listdir(peer_dir):
        if pattern.match(d):
            yield peer_dir + "/" + d

def get_title(node):
    if re.match(".*[0-9]{5}", node):
        return node[-5:]
    elif len(node)>7 and node[-7:] == "tracker":
        return "tracker"
    return "???"

def plot_received_records(peers_directory, first, last):
    """ I plot the received records per peer"""
    print "set ylabel 'number of records received'"
    # print "set yrange [%d:%d]" % (0, 500)
    print "set xrange [%d:%d]" % (0, last - first)
    #print "set key bottom right" #MB
    print "plot",
    first = True
    for node in get_nodes(peers_directory):
        if first:
            first = False
        else:
            print ", \\\n    ",

        filename = node + "/output/received-record.txt"
        print "'%s'" % filename,
        print "using 2:3",
        print "title '%s'" % get_title(node),
        print "with steps",

    print ""

def plot_total_records(peers_directory, first, last):
    """ I plot the total (received, created) records per peer """
    print "set ylabel 'number of records per peer'"
    # print "set yrange [%d:%d]" % (0, 1500)
    print "set xrange [%d:%d]" % (0, last - first)
    print "plot",
    first = True
    for node in get_nodes(peers_directory):
        if first:
            first = False
        else:
            print ", \\\n    ",

        filename = node + "/output/total-record.txt"
        print "'%s'" % filename,
        print "using 2:3",
        print "title '%s'" % get_title(node),
        print "with steps",

    print ", \\\n    ",
    print "'"+ peers_directory + "/output/sum_created_records.txt'",
    print "using 1:2",
    print "title 'total'",
    print "with steps lw 2",
    print ""


def plot_drop(peers_directory, first, last):
    """ I plot the dropped records per peer """
    print "set ylabel 'number of records droped'"
    # print "set yrange [%d:%d]" % (0, 500)
    print "set xrange [%d:%d]" % (0, last - first)
    print "plot",
    first = True
    for node in get_nodes(peers_directory):
        if first:
            first = False
        else:
            print ", \\\n    ",

        filename = node + "/output/drop.txt"
        print "'%s'" % filename,
        print "using 2:3",
        print "title '%s'" % get_title(node),
        print "with steps",

    print ""

def plot_send(peers_directory, first, last):
    """ I plot the kilobytes send per peer """
    print "set ylabel 'number of kilobytes send'"
    print "set xrange [%d:%d]" % (0, last - first)
    print "plot",
    first = True
    for node in get_nodes(peers_directory):
        if first:
            first = False
        else:
            print ", \\\n    ",

        filename = node + "/output/stat.txt"
        print "'%s'" % filename,
        print "using 2:($3/1024)",
        print "title '%s'" % get_title(node),
        print "with steps",
    print ""

def plot_received(peers_directory, first, last):
    """ I plot the kilobytes received per peer """
    print "set ylabel 'number of kilobytes received'"
    print "set xrange [%d:%d]" % (0, last - first)
    print "plot",
    first = True
    for node in get_nodes(peers_directory):
        if first:
            first = False
        else:
            print ", \\\n    ",

        filename = node + "/output/stat.txt"
        print "'%s'" % filename,
        print "using 2:($4/1024)",
        print "title '%s'" % get_title(node),
        print "with steps",
    print ""

def header(peers_directory, filename):
    print "reset"
    print "set terminal png enhanced large # size 1024, 1024"
    print "set output '"+ peers_directory + "/output/%s.png'" % filename
    # print "set term epslatex"
    # print "set output 'peers/%s.eps'" % filename
    #print "set key outside" #MB

    #if filename in ["received", "sent"]:
    #    print "set yrange [0:1000]"
    #elif filename in ["drops"]:
    #    print "set yrange [0:400]"
    #else:
    #    print "set yrange [0:5000]"
    print "set xlabel 'Time expired in seconds'"
    print "unset key"

def records(peers_directory, first, last):
    header(peers_directory, "records-total")
    plot_total_records(peers_directory, first, last)

def received_records(peers_directory, first, last):
    header(peers_directory, "records-received")
    plot_received_records(peers_directory, first, last)

def drops(peers_directory, first, last):
    header(peers_directory, "records-dropped")
    plot_drop(peers_directory, first, last)

def received(peers_directory, first, last):
    header(peers_directory, "traffic-received")
    plot_received(peers_directory, first, last)

def sent(peers_directory, first, last):
    header(peers_directory, "traffic-sent")
    plot_send(peers_directory, first, last)

def multiplot(peers_directory, first, last):
    header(peers_directory, "multiplot")
    print "set grid"
    print "set size 1,1"
    print "set origin 0,0"
    print "set multiplot layout 2,2 rowsfirst "

    # print "set multiplot"
    # print "set size 0.5, 0.5"
    # print "set origin 0.0, 0.5" # upper left
    # plot_received_record(first, last)
    plot_total_records(peers_directory, first, last)
    # print "set origin 0.5, 0.5" # upper right
    plot_drop(peers_directory, first, last)
    # print "set origin 0.0, 0.0" # lower left
    plot_received(peers_directory, first, last)
    # print "set origin 0.5, 0.0" # lower right
    plot_send(peers_directory, first, last)
    print "unset multiplot"

def main(peers_directory):
    fn_first_last = peers_directory + "/output/first_last.txt"
    h_first_last = open(fn_first_last, "r")
    [ first, last ] = [int(i) for i in h_first_last.readline().strip().split()]
    h_first_last.close()
 
    for func in [records, drops, received, sent, received_records]:
        func(peers_directory, first, last+100)

if __name__ == "__main__":
    main(argv[1])
